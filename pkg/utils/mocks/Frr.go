// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022-2023 Dell Inc, or its subsidiaries.

// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	telnet "github.com/ziutek/telnet"
)

// Frr is an autogenerated mock type for the Frr type
type Frr struct {
	mock.Mock
}

type Frr_Expecter struct {
	mock *mock.Mock
}

func (_m *Frr) EXPECT() *Frr_Expecter {
	return &Frr_Expecter{mock: &_m.Mock}
}

// EnterPrivileged provides a mock function with given fields: conn
func (_m *Frr) EnterPrivileged(conn *telnet.Conn) error {
	ret := _m.Called(conn)

	if len(ret) == 0 {
		panic("no return value specified for EnterPrivileged")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telnet.Conn) error); ok {
		r0 = rf(conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Frr_EnterPrivileged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnterPrivileged'
type Frr_EnterPrivileged_Call struct {
	*mock.Call
}

// EnterPrivileged is a helper method to define mock.On call
//   - conn *telnet.Conn
func (_e *Frr_Expecter) EnterPrivileged(conn interface{}) *Frr_EnterPrivileged_Call {
	return &Frr_EnterPrivileged_Call{Call: _e.mock.On("EnterPrivileged", conn)}
}

func (_c *Frr_EnterPrivileged_Call) Run(run func(conn *telnet.Conn)) *Frr_EnterPrivileged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*telnet.Conn))
	})
	return _c
}

func (_c *Frr_EnterPrivileged_Call) Return(_a0 error) *Frr_EnterPrivileged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Frr_EnterPrivileged_Call) RunAndReturn(run func(*telnet.Conn) error) *Frr_EnterPrivileged_Call {
	_c.Call.Return(run)
	return _c
}

// ExitPrivileged provides a mock function with given fields: conn
func (_m *Frr) ExitPrivileged(conn *telnet.Conn) error {
	ret := _m.Called(conn)

	if len(ret) == 0 {
		panic("no return value specified for ExitPrivileged")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telnet.Conn) error); ok {
		r0 = rf(conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Frr_ExitPrivileged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExitPrivileged'
type Frr_ExitPrivileged_Call struct {
	*mock.Call
}

// ExitPrivileged is a helper method to define mock.On call
//   - conn *telnet.Conn
func (_e *Frr_Expecter) ExitPrivileged(conn interface{}) *Frr_ExitPrivileged_Call {
	return &Frr_ExitPrivileged_Call{Call: _e.mock.On("ExitPrivileged", conn)}
}

func (_c *Frr_ExitPrivileged_Call) Run(run func(conn *telnet.Conn)) *Frr_ExitPrivileged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*telnet.Conn))
	})
	return _c
}

func (_c *Frr_ExitPrivileged_Call) Return(_a0 error) *Frr_ExitPrivileged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Frr_ExitPrivileged_Call) RunAndReturn(run func(*telnet.Conn) error) *Frr_ExitPrivileged_Call {
	_c.Call.Return(run)
	return _c
}

// FrrBgpCmd provides a mock function with given fields: ctx, command, cmdTypeShow
func (_m *Frr) FrrBgpCmd(ctx context.Context, command string, cmdTypeShow bool) (string, error) {
	ret := _m.Called(ctx, command, cmdTypeShow)

	if len(ret) == 0 {
		panic("no return value specified for FrrBgpCmd")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (string, error)); ok {
		return rf(ctx, command, cmdTypeShow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = rf(ctx, command, cmdTypeShow)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, command, cmdTypeShow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Frr_FrrBgpCmd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrrBgpCmd'
type Frr_FrrBgpCmd_Call struct {
	*mock.Call
}

// FrrBgpCmd is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
//   - cmdTypeShow bool
func (_e *Frr_Expecter) FrrBgpCmd(ctx interface{}, command interface{}, cmdTypeShow interface{}) *Frr_FrrBgpCmd_Call {
	return &Frr_FrrBgpCmd_Call{Call: _e.mock.On("FrrBgpCmd", ctx, command, cmdTypeShow)}
}

func (_c *Frr_FrrBgpCmd_Call) Run(run func(ctx context.Context, command string, cmdTypeShow bool)) *Frr_FrrBgpCmd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *Frr_FrrBgpCmd_Call) Return(_a0 string, _a1 error) *Frr_FrrBgpCmd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Frr_FrrBgpCmd_Call) RunAndReturn(run func(context.Context, string, bool) (string, error)) *Frr_FrrBgpCmd_Call {
	_c.Call.Return(run)
	return _c
}

// FrrZebraCmd provides a mock function with given fields: ctx, command, cmdTypeShow
func (_m *Frr) FrrZebraCmd(ctx context.Context, command string, cmdTypeShow bool) (string, error) {
	ret := _m.Called(ctx, command, cmdTypeShow)

	if len(ret) == 0 {
		panic("no return value specified for FrrZebraCmd")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (string, error)); ok {
		return rf(ctx, command, cmdTypeShow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = rf(ctx, command, cmdTypeShow)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, command, cmdTypeShow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Frr_FrrZebraCmd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrrZebraCmd'
type Frr_FrrZebraCmd_Call struct {
	*mock.Call
}

// FrrZebraCmd is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
//   - cmdTypeShow bool
func (_e *Frr_Expecter) FrrZebraCmd(ctx interface{}, command interface{}, cmdTypeShow interface{}) *Frr_FrrZebraCmd_Call {
	return &Frr_FrrZebraCmd_Call{Call: _e.mock.On("FrrZebraCmd", ctx, command, cmdTypeShow)}
}

func (_c *Frr_FrrZebraCmd_Call) Run(run func(ctx context.Context, command string, cmdTypeShow bool)) *Frr_FrrZebraCmd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *Frr_FrrZebraCmd_Call) Return(_a0 string, _a1 error) *Frr_FrrZebraCmd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Frr_FrrZebraCmd_Call) RunAndReturn(run func(context.Context, string, bool) (string, error)) *Frr_FrrZebraCmd_Call {
	_c.Call.Return(run)
	return _c
}

// Password provides a mock function with given fields: conn, delim
func (_m *Frr) Password(conn *telnet.Conn, delim string) error {
	ret := _m.Called(conn, delim)

	if len(ret) == 0 {
		panic("no return value specified for Password")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telnet.Conn, string) error); ok {
		r0 = rf(conn, delim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Frr_Password_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Password'
type Frr_Password_Call struct {
	*mock.Call
}

// Password is a helper method to define mock.On call
//   - conn *telnet.Conn
//   - delim string
func (_e *Frr_Expecter) Password(conn interface{}, delim interface{}) *Frr_Password_Call {
	return &Frr_Password_Call{Call: _e.mock.On("Password", conn, delim)}
}

func (_c *Frr_Password_Call) Run(run func(conn *telnet.Conn, delim string)) *Frr_Password_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*telnet.Conn), args[1].(string))
	})
	return _c
}

func (_c *Frr_Password_Call) Return(_a0 error) *Frr_Password_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Frr_Password_Call) RunAndReturn(run func(*telnet.Conn, string) error) *Frr_Password_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *Frr) Save(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Frr_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Frr_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Frr_Expecter) Save(_a0 interface{}) *Frr_Save_Call {
	return &Frr_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *Frr_Save_Call) Run(run func(_a0 context.Context)) *Frr_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Frr_Save_Call) Return(_a0 error) *Frr_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Frr_Save_Call) RunAndReturn(run func(context.Context) error) *Frr_Save_Call {
	_c.Call.Return(run)
	return _c
}

// TelnetDialAndCommunicate provides a mock function with given fields: ctx, command, port
func (_m *Frr) TelnetDialAndCommunicate(ctx context.Context, command string, port int) (string, error) {
	ret := _m.Called(ctx, command, port)

	if len(ret) == 0 {
		panic("no return value specified for TelnetDialAndCommunicate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (string, error)); ok {
		return rf(ctx, command, port)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) string); ok {
		r0 = rf(ctx, command, port)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, command, port)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Frr_TelnetDialAndCommunicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TelnetDialAndCommunicate'
type Frr_TelnetDialAndCommunicate_Call struct {
	*mock.Call
}

// TelnetDialAndCommunicate is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
//   - port int
func (_e *Frr_Expecter) TelnetDialAndCommunicate(ctx interface{}, command interface{}, port interface{}) *Frr_TelnetDialAndCommunicate_Call {
	return &Frr_TelnetDialAndCommunicate_Call{Call: _e.mock.On("TelnetDialAndCommunicate", ctx, command, port)}
}

func (_c *Frr_TelnetDialAndCommunicate_Call) Run(run func(ctx context.Context, command string, port int)) *Frr_TelnetDialAndCommunicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *Frr_TelnetDialAndCommunicate_Call) Return(_a0 string, _a1 error) *Frr_TelnetDialAndCommunicate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Frr_TelnetDialAndCommunicate_Call) RunAndReturn(run func(context.Context, string, int) (string, error)) *Frr_TelnetDialAndCommunicate_Call {
	_c.Call.Return(run)
	return _c
}

// NewFrr creates a new instance of Frr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFrr(t interface {
	mock.TestingT
	Cleanup(func())
}) *Frr {
	mock := &Frr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
